/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QuickChat;

import java.util.regex.Pattern;

public class RegistrationSystem 
{
    // Scanner object for user input
    private static final Scanner scanner = new Scanner(System.in);
    
    // User account storage
    private static String registeredUsername = "";
    private static String registeredPassword = "";
    private static String registeredPhone = "";
    
    public static void main(String[] args) 
    {
        JOptionPane.showMessageDialog(null, "Welcome to the Registration and Login System");
        
        while (true) {
            JOptionPane.showMessageDialog(null, "\nMenu:");
            JOptionPane.showMessageDialog(null, "1. Register");
            JOptionPane.showMessageDialog(null, "2. Login");
            JOptionPane.showMessageDialog(null, "3. Exit");
            JOptionPane.showMessageDialog(null, "Enter your choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            switch (choice) {
                case 1:
                    registerUser();
                    break;
                case 2:
                    loginUser();
                    break;
                case 3:
                    JOptionPane.showMessageDialog(null, "Goodbye!");
                    System.exit(0);
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please try again.");
                    
        Login loginSystem = new Login();
            }
        }
    }
    
    private static void registerUser() {
        JOptionPane.showMessageDialog(null, "\n--- Registration ---");
        
        // Username validation
        String username;
        while (true) {
            username = JOptionPane.showInputDialog( "Enter username (must contain underscore and be ≤5 chars): ");
            if (validateUsername(username)) 
            {
                JOptionPane.showMessageDialog(null, "Username successfully captured.");
                break;
            } else {
                JOptionPane.showMessageDialog(null, "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than five characters in length.");
            }
        }
        
        // Password validation
        String password;
        while (true) 
        {
            password = JOptionPane.showInputDialog(null, "Enter password: ");
            if (validatePassword(password))
            {
                JOptionPane.showMessageDialog(null, "Password successfully captured.");
                break;
            } else 
            {
                JOptionPane.showMessageDialog(null, "Password is not correctly formatted, please ensure that the password contains at least 8 characters, a capital letter, a number, and a special character.");
            }
        }
        
        // Phone number validation
        String phone;
        while (true) {
            JOptionPane.showMessageDialog(null, "Enter South African cell phone number (e.g., 0781234567): ");
            phone = scanner.nextLine();
            if (validatePhoneNumber(phone)) {
                JOptionPane.showMessageDialog(null, "Phone number successfully captured.");
                break;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid South African cell phone number. Please enter a 10-digit number starting with 0.");
            }
        }
        
        // Store registration details
        registeredUsername = username;
        registeredPassword = password;
        registeredPhone = phone;
        
        JOptionPane.showMessageDialog(null, "Registration successful!");
    }
    
    private static void loginUser()
    {
        if (registeredUsername.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "No user registered. Please register first.");
            return;
        }
        
        JOptionPane.showMessageDialog(null, "\n Login ");
        String username = JOptionPane.showInputDialog(null, "Enter username: ");
        
        String password = JOptionPane.showInputDialog(null, "Enter password: ");
        
        if (username.equals(registeredUsername) && password.equals(registeredPassword)) 
        {
            JOptionPane.showMessageDialog(null, "Welcome " + username + ", it is great to see you again.");
        } else
        {
            JOptionPane.showMessageDialog(null, "Username or password incorrect, please try again.");
        }
    }
    
    private static boolean validateUsername(String username)
    {
        return username.length() <= 5 && username.contains("_");
    }
    
    private static boolean validatePassword(String password) 
    {
        // Password must be at least 8 characters
        if (password.length() < 8) return false;
        
        // Check for at least one capital letter
        boolean hasCapital = false;
        // Check for at least one number
        boolean hasNumber = false;
        // Check for at least one special character
        boolean hasSpecial = false;
        
        for (char c : password.toCharArray())
        {
            if (Character.isUpperCase(c)) hasCapital = true;
            if (Character.isDigit(c)) hasNumber = true;
            if (!Character.isLetterOrDigit(c)) hasSpecial = true;
        }
        
        return hasCapital && hasNumber && hasSpecial;
    }
    
    private static boolean validatePhoneNumber(String phone) 
    {
        // South African cell numbers start with 0 and are 10 digits long
        return Pattern.matches("^0[0-9]{9}$", phone);
    }
}


class Login
{
    private final Scanner scanner = new Scanner(System.in);
    private User registeredUser = null;
    
    // Validation patterns
    private static final String PHONE_PATTERN = "^\\+27[0-9]{9}$"; // South Africa country code +27
    
    public void runApplication() 
    {
        JOptionPane.showMessageDialog(null, "Welcome to the Registration and Login System");
        
        while (true) 
        {
            JOptionPane.showMessageDialog(null, "\nMenu:");
            JOptionPane.showMessageDialog(null, "1. Register");
            JOptionPane.showMessageDialog(null, "2. Login");
            JOptionPane.showMessageDialog(null, "3. Exit");
            JOptionPane.showMessageDialog(null, "Enter your choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // This produces a new line
            
            switch (choice) {
                case 1:
                    registerUser();
                    break;
                case 2:
                    loginUser();
                    break;
                case 3:
                    System.out.println("Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    
    // Registration method that returns status messages
    public String registerUser(String username, String password, String phoneNumber) {
        if (!checkUsername(username)) {
            return "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than 8 characters in length.";
        }
        
        if (!checkPasswordComplexity(password)) {
            return "Password does not meet complexity requirements.";
        }
        
        if (!checkCellphoneNumber(phoneNumber)) {
            return "Cellphone number is not correctly formatted. Please include country code (e.g., +27781234567).";
        }
        
        // Extract first and last name from username
        String[] nameParts = username.split("_");
        String firstName = nameParts.length > 0 ? nameParts[0] : "";
        String lastName = nameParts.length > 1 ? nameParts[1] : "";
        
        // Store user information
        registeredUser = new User(username, password, phoneNumber, firstName, lastName);
        
        return "User registered successfully.";
    }
    
    // Public method for registration through UI
    private void registerUser() 
    {
        JOptionPane.showMessageDialog(null, "\n Registration ");
        
        JOptionPane.showInputDialog("Enter username (must contain underscore and be ≤8 chars): ");
        String username = scanner.nextLine();
        
        JOptionPane.showInputDialog("Enter password: ");
        String password = scanner.nextLine();
        
        JOptionPane.showInputDialog("Enter South African cell phone number with country code (e.g., +27781234567): ");
        String phone = scanner.nextLine();
        
        String registrationStatus = registerUser(username, password, phone);
        JOptionPane.showMessageDialog(registrationStatus);
    }
    
    // Login method that returns boolean status
    public boolean loginUser(String username, String password)
    {
        if (registeredUser == null) return false;
        return username.equals(registeredUser.getUsername()) && 
               password.equals(registeredUser.getPassword());
    }
    
    // Public method for login through UI
    private void loginUser() 
    {
        if (registeredUser == null) 
        {
            JOptionPane.showMessageDialog("No user registered. Please register first.");
            return;
        }
        
        System.out.println("\n--- Login ---");
        JOptionPane.showInputDialog("Enter username: ");
        String username = scanner.nextLine();
        
        JOptionPane.showInputDialog("Enter password: ");
        String password = scanner.nextLine();
        
        boolean loginStatus = loginUser(username, password);
        JOptionPane.showMessageDialog(returnLoginStatus(loginStatus));
    }
    
    // Username validation
    public boolean checkUsername(String username) 
    {
        return username != null && 
               username.length() <= 8 && 
               username.contains("_");
    }
    
    // Password complexity validation
    public boolean checkPasswordComplexity(String password)
    {
        if (password == null || password.length() < 8) return false;
        
        boolean hasCapital = false;
        boolean hasNumber = false;
        boolean hasSpecial = false;
        
        for (char c : password.toCharArray())
        {
            if (Character.isUpperCase(c)) hasCapital = true;
            if (Character.isDigit(c)) hasNumber = true;
            if (!Character.isLetterOrDigit(c)) hasSpecial = true;
        }
        
        return hasCapital && hasNumber && hasSpecial;
    }
    
    // Phone number validation
    public boolean checkCellphoneNumber(String phoneNumber) 
    {
        return phoneNumber != null && 
               Pattern.matches(PHONE_PATTERN, phoneNumber);
    }
    
    // Login status message
    public String returnLoginStatus(boolean loginStatus)
    {
        if (loginStatus)
        {
            return "Welcome " + registeredUser.getFirstName() + ", " + 
                   registeredUser.getLastName() + " it is great to see you again.";
        } else 
        {
            return "Username or password incorrect, please try again.";
        }
    }
}

class User
{
    private final String username;
    private final String password;
    private final String phoneNumber;
    private final String firstName;
    private final String lastName;
    
    public User(String username, String password, String phoneNumber, String firstName, String lastName) 
    {
        this.username = username;
        this.password = password;
        this.phoneNumber = phoneNumber;
        this.firstName = firstName;
        this.lastName = lastName;
    }
    
    public String getUsername();
    return username; 
    
    public String getPassword();
    return password; 
    
    public String getPhoneNumber();
    return phoneNumber;
    
    public String getFirstName(); 
    return firstName; 
    
    public String getLastName(); 
    return lastName; 
}


}
